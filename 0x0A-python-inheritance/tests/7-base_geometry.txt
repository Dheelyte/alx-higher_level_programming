=============================
How to use 7-base_geometry.py
=============================


This module contains a class called ```BaseGeometry```


::


	>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("Geometry", 1)


::


	>>> bg.integer_validator("Geometry", 0)
	Traceback (most recent call last):
	ValueError: Geometry must be greater than 0


::


	>>> bg.integer_validator("Geometry", -1)
	Traceback (most recent call last):
	ValueError: Geometry must be greater than 0


::


	>>> bg.integer_validator("Geometry", "3")
	Traceback (most recent call last):
	TypeError: Geometry must be an integer


::


	>>> bg.integer_validator("Geo", 2.0)
	Traceback (most recent call last):
	TypeError: Geo must be an integer


::


	>>> bg.integer_validator("Geo", None)
	Traceback (most recent call last):
	TypeError: Geo must be an integer


::


	>>> bg.integer_validator()
	Traceback (most recent call last):
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'


::


	>>> bg.integer_validator("Geo")
	Traceback (most recent call last):
	TypeError: integer_validator() missing 1 required positional argument: 'value'


::


	>>> bg.integer_validator("Geo", (4,))
	Traceback (most recent call last):
        TypeError: Geo must be an integer


::


	>>> bg.integer_validator("Geo", [3])
	Traceback (most recent call last):
        TypeError: Geo must be an integer


::


	>>> bg.integer_validator("Geo", True)
	Traceback (most recent call last):
        TypeError: Geo must be an integer


::


	>>> bg.integer_validator("Geo", {3, 4})
	Traceback (most recent call last):
        TypeError: Geo must be an integer


::


	>>> bg.area()
	Traceback (most recent call last):
        Exception: area() is not implemented
